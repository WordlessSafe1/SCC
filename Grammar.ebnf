<comment>				::= "//" { <letter> | <digit> | <symbol> | ' ' | '\t' }
<program>				::= { <function> | <declaration> | <struct_declaration> | <union_declaration> | <enum_declaration> | <typedef> }
<typedef>				::= "typedef" [ "union" | "struct" | "enum" ] <id> { '*' } [ <id> ] ';'
<union_declaration>		::= "union" <id> '{' <declaration> { <declaration> } '}' ';'
<struct_declaration>	::= "struct" <id> '{' <declaration> { <declaration> } '}' ';'
<enum_declaration>		::= "enum" [ <id> ] '{' [ <enum_value> { ',' <enum_value> } ] [ ',' ] '}'
<enum_value>			::= <id> [ '=' ( <int> | <character_literal> ) ]
<function>				::= <type> <id> "(" [ <type> <id> { ',' <type> <id> } ] ")" ( <block> | ';' )
<block_item>			::= <statement> | <declaration>
<block>					::= '{' [ <block_item> ] '}'
<declaration>			::= <type> <id> [ '=' <expression> ] ';'
<statement>				::= <block> | <return_statement> | <if_statement> | <control_statement> | [ <expression> ] ';'
<control_statement>		::= ( "break" | "continue" ) ';'
<if_statement>			::= "if" '(' <expression> ')' <statement> [ "else" <statement> ]
<loop>					::= <while_loop> | <do_loop> | <for_loop>
<while_loop>			::= "while" '(' <expression> ')' <statement>
<do_loop>				::= "do" <statement> "while" '(' <expression> ')' ';'
<for_loop>				::= "for" '(' ( <declaration> | [ <expression> ] ';' ) [ <expression> ] ';' [ <expression> ] ')' <statement>
<return_statement>		::= "return" [ <expression> ] ';'
<expression>			::= <assignment_expr>
<assignment_expr>		::= <id> [ <compound_assign_op> ] '=' <expression> | <conditional_expr>
<conditional_expr>		::= <logical_or_expr> [ '?' [ <expression> ] ':' <conditional_expr> ]
<logical_or_expr>		::= <logical_and_expr> { "||" <logical_and_expr> }
<logical_and_expr>		::= <bitwise_or_expr> { "&&" <bitwise_or_expr> }
<bitwise_or_expr>		::= <bitwise_xor_expr> { '|' <bitwise_xor_expr> }
<bitwise_xor_expr>		::= <bitwise_and_expr> { '^' <bitwise_and_expr> }
<bitwise_and_expr>		::= <equality_expr> { '&' <equality_expr> }
<equality_expr>			::= <relational_expr> { ( "==" | "!=" ) <relational_expr> }
<relational_expr>		::= <bit_shift_expr> { ( '<' | '>' | "<=" | ">=" ) <bit_shift_expr> }
<bit_shift_expr>		::= <additive_expr> { ( "<<" | ">>" ) <additive_expr> }
<additive_expr>			::= <term> { ( '+' | '-' ) <term> }
<term>					::= <factor> { ( '*' | '/' | '%' ) <factor> }
<factor>				::= <base> | <unary_op> <factor> | ( "++" | "--" ) <id> | <id> ( "++" | "--" )
<base>					::= <id> | <function_call> | <id> '[' <expression> ']' | <character_literal>
							| <base> "->" <id> | <factor> '.' <id> | <string_literal> | <int>
<function_call>			::= <id> '(' [ <expression> { ',' <expression> } ] ')'

<type>					::= <type> '*' | "void" | "char" | "int" | "long"
<unary_op>				::= '~' | '!' | '-' | '*' | '&'
<compound_assign_op>	::= '+' | '-' | '*' | '/' | '%' | "<<" | ">>" | '&' | '^' | '|'

<id>					::= <letter> { <letter> | <digit> }
<character_literal>		::= "'" ( <escape_sequence> | <symbol> | <letter> | <digit> | <whitespace> ) "'"
<string_literal>		::= '"' { <escape_sequence> | <symbol> | <letter> | <digit> | <whitespace> } '"'
<escape_sequence>		::= '\\' ( 'a' | 'b' | 'e' | 'f' | 'n' | 'r' | 't' | 'v' | '0' | '\\' | "'" | '"' | '?' )
<symbol>				::= "!" | '"' | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | ","
							| "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "\\" # \\ is a literal \
							| "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"
<letter>				::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H"
							| "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P"
							| "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X"
							| "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f"
							| "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n"
							| "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v"
							| "w" | "x" | "y" | "z"
<whitespace>			::= '\t' | ' '
<int>					::= <digit> | <int> <digit>
<digit>					::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"